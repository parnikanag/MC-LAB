#include <LPC21xx.h> // Include the header file for the specific ARM7 microcontrollervoid enable_interrupts(void) { __asm { MRS R0, CPSR // Move the current program status register to R0 BIC R0, R0, #0x80 // Clear the I bit in CPSR (enables IRQ) MSR CPSR_c, R0 // Move the modified value back to CPSR }}void disable_interrupts(void) { __asm { MRS R0, CPSR // Move the current program status register to R0 ORR R0, R0, #0x80 // Set the I bit in CPSR (disables IRQ) MSR CPSR_c, R0 // Move the modified value back to CPSR }}int main(void) {  disable_interrupts(); // Disable interrupts enable_interrupts(); // Enable interrupts }


#include <lpc21xx.h>int main(){unsigned int num = 5, i;unsigned long fact = 1;for(i = 1; i<=num; i++)fact = fact*i;return 0;}



# include <lpc21xx.h>char src[] = "Hello";char dest[] = "";void caseConvert(){unsigned int i;for (i = 0; src[i]!='\0'; i++){if(src[i] >= 'a' && src[i] <= 'z') {dest[i] = src[i] - 32;}if(src[i] >= 'A' && src[i] <= 'Z') {dest[i] = src[i] + 32;}}}int main(){caseConvert();return 0;}



#include <lpc21xx.h>void swap(unsigned int* arr, unsigned int i, unsigned int j){ unsigned int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp;}// function to implement bubble sortvoid bubbleSort(unsigned int arr[], unsigned int n){ unsigned int i, j; for (i = 0; i < n - 1; i++)   }for (j = 0; j < n - i - 1; j++)if (arr[j] > arr[j + 1])swap(arr, j, j + 1);int main(){ unsigned int arr[] = { 5, 1, 4, 2, 8 }; unsigned int N = sizeof(arr) / sizeof(arr[0]); bubbleSort(arr, N);  return 0;}


